# -*- coding: utf-8 -*-
"""code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gW-oVIr4RtKrnMcO1INFWyplF66Hsa2b
"""

# !pip install opencv-python-headless
# !pip install opencv-python
# !pip install ultralytics
# !pip install pygame

import cv2
from ultralytics import YOLO
import time
import pygame
import threading

class AudioPlayer:
    def __init__(self, audio_files):
        pygame.mixer.init()
        self.audio_files = audio_files
        self.current_audio_index = 0

    def play_next_audio(self):
        pygame.mixer.music.load(self.audio_files[self.current_audio_index])
        pygame.mixer.music.play()
        self.current_audio_index = (self.current_audio_index + 1) % len(self.audio_files)

    def async_play_audio(self):
        if not pygame.mixer.music.get_busy():
            threading.Thread(target=self.play_next_audio).start()

class DrowsinessDetector:
    def __init__(self, model_path, audio_player, drowsiness_duration=2):
        self.model = YOLO(model_path)
        self.audio_player = audio_player
        self.drowsy_start_time = None
        self.drowsiness_duration = drowsiness_duration

    def process_frame(self, frame):
        resized_frame = cv2.resize(frame, (320, 240))
        results = self.model(resized_frame)
        annotated_frame = results[0].plot()

        if results[0].boxes:
            for box in results[0].boxes:
                if box.cls == 1:  # Assuming 'drowsy' is class 1
                    if self.drowsy_start_time is None:
                        self.drowsy_start_time = time.time()
                    elif time.time() - self.drowsy_start_time >= self.drowsiness_duration:
                        self.audio_player.async_play_audio()
                else:
                    self.drowsy_start_time = None
        else:
            self.drowsy_start_time = None

        return annotated_frame

class VideoCapture:
    def __init__(self, detector, width=640, height=480):
        self.cap = cv2.VideoCapture(0)
        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, width)
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, height)
        self.detector = detector

    def start(self):
        while self.cap.isOpened():
            success, frame = self.cap.read()
            if not success:
                break

            annotated_frame = self.detector.process_frame(frame)
            cv2.imshow("YOLOv8 Inference", annotated_frame)

            if cv2.waitKey(1) & 0xFF == ord("q"):
                break

        self.cap.release()
        cv2.destroyAllWindows()
        pygame.mixer.quit()

if __name__ == "__main__":
    audio_files = ['a.mp3', 'b.mp3', 'c.mp3', 'd.mp3', 'e.mp3']
    audio_player = AudioPlayer(audio_files)
    drowsiness_detector = DrowsinessDetector('best.pt', audio_player)
    video_capture = VideoCapture(drowsiness_detector)
    video_capture.start()